

standard_example_functions = ["sin(x)", "x * tan(x)", "pow(x, x)", 
  "sin(1/x)", "tan(x) * sin(x)", "cos(tan(x))",
  "x * tan(x) * sin(x)", "sin(x) * x", "cos(tan(x)) / sin(x)",
  "pow(abs(x), cos(x))", "pow(abs(x), sin(x))"]

polar_example_functions = ["pow(x, 1.5) * sin(x) * cos(x)", "x * sin(x)"]

rand_nth = (coll) ->
  coll[Math.floor(Math.random() * coll.length)]

new_fn_object = (prev_id) -> {
  polar_range_min: ko.observable 0
  polar_range_max: ko.observable 10
  polar_step_size: ko.observable 0.01
  
  para_range_min: ko.observable 0
  para_range_max: ko.observable 10
  para_step_size: ko.observable 0.01
  
  type: ko.observable("Standard")
  source: rand_nth(standard_example_functions)
  source_polar: rand_nth(polar_example_functions)
  source_para_x: "sin(t)"
  source_para_y: "cos(t)"
  stroke: "#" + random(9) + random(9) + random(9)
  id: 1 + prev_id
  }

# ---------------------------------------
# knockout 

random = (max) ->
  Math.round(Math.random() * max)

viewModel = {
  functions: ko.observableArray([])
  add_function: -> 
    prev_id = Math.max.apply(null, obj.id for obj in this.functions())
    if this.functions().length == 0 then prev_id = 0
    f = new_fn_object(prev_id)
    this.functions.push(f)
    init_fn_object(f)

  range_x_min: ko.observable(-10)
  range_x_max: ko.observable(10)
  range_y_min: ko.observable(-10)
  range_y_max: ko.observable(10)

  grid_distance_x: ko.observable(1)
  grid_distance_y: ko.observable(1)
  step_size: ko.observable(0.01)
}

ko.bindingHandlers.number_value = {
  init: (element, valueAccessor, allBindingsAccessor, viewModel) ->
    $(element).focusout ->
      ab = allBindingsAccessor()
      raw_value = $(element).val()
      current_value = ko.utils.unwrapObservable(valueAccessor())
      if isNaN(raw_value) #or (not_eq and v == not_eq)
        $(element).val(String(current_value))
      else
        v = parseFloat(raw_value)
        if ab.min? then v = Math.max(ab.min, v)
        if ab.max? then v = Math.min(v, ab.max)
        valueAccessor()(v)

  update: (element, valueAccessor, allBindingsAccessor, viewModel) ->
    $(element).val(String(valueAccessor()()))
}

ko.applyBindings(viewModel)

# ---------------------------------------
# knockout utils

get_range_x = ->
  [viewModel.range_x_min(),
   viewModel.range_x_max()]

get_range_y = ->
  [viewModel.range_y_min(),
   viewModel.range_y_max()]

paper = Raphael("draw_area", 300, 300)

# ---------------------------------------
# coordinate animations

animations = []

animate = (obj, animation) ->
  animations.push({obj: obj, ani: animation})
  
start_animation = () ->
  if animations.length > 0
    animating_object = animations[0].obj
    animating_animation = animations[0].ani
    animating_object.animate(animating_animation)
    for {obj, ani} in animations[1..-1]
      obj.animateWith(animating_object, animating_animation, ani)
    animations = []
    
# ---------------------------------------
# convert mathematical coordinates to paper coordinates

get_paper_x = (x) ->
  dx =  Math.abs(get_range_x()[0] - get_range_x()[1])
  (x - get_range_x()[0]) * paper.width / dx

get_paper_y = (y) ->
  dy = Math.abs(get_range_y()[0] - get_range_y()[1])
  paper.height - ((y - get_range_y()[0]) * paper.height / dy)

# ---------------------------------------
# drawing

axes_object = null
draw_axes = ->
  p_x = "M0," + get_paper_y(0) + "L" + get_paper_x(get_range_x()[1]) + "," + get_paper_y(0)
  p_y = "M" + get_paper_x(0) + ",0L" + get_paper_x(0) + "," + get_paper_y(get_range_y()[0])
  p = p_x + p_y
  if axes_object
    axes_object.animate(Raphael.animation({path: p}, 300, "<>"))
  else
    axes_object = paper.path(p)
    axes_object.attr("stroke-width", "2")

grid_object = null
draw_grid = ->
  distance_x = viewModel.grid_distance_x()
  distance_y = viewModel.grid_distance_y()
  if get_range_x()[0] < 0
    x_path_neg = for x in [0..get_range_x()[0]] by -distance_x
      "M" + get_paper_x(x) + ",0" + "l0," + paper.height
  else
    x_path_neg = []
    
  if get_range_x()[1] > 0
    x_path_pos = for x in [0..get_range_x()[1]] by distance_x
      "M" + get_paper_x(x) + ",0" + "l0," + paper.height
  else
    x_path_pos = []
  
  if get_range_y()[0] < 0
    y_path_neg = for y in [0..get_range_y()[0]] by -distance_y
      "M0," + get_paper_y(y) + "l" + paper.width + ",0"
  else
    y_path_neg = []
  
  if get_range_y()[1] > 0
    y_path_pos = for y in [0..get_range_y()[1]] by distance_y
      "M0," + get_paper_y(y) + "l" + paper.width + ",0"
  else
    y_path_pos = []

  p = x_path_neg.join("") + x_path_pos.join("") + y_path_neg.join("") + y_path_pos.join("")
  if grid_object
    grid_object.animate(Raphael.animation({path: p}, 300, "<>"))
  else
    grid_object = paper.path(p)
    grid_object.attr({"stroke-width": "2", "stroke": "#EEE"})

draw_border = ->
  r = paper.rect(0, 0, paper.width, paper.height)
  r.attr("fill-opacity", "0")
  r.attr("stroke", "#555")
  r.attr("stroke-width", "10")

for e in $('.axes_updating_elem')
  # doesn't work for some reason
  #$(e).bind 'keydown', (e) ->
  #  if e.which == 13 then redraw()
  #
  $(e).focusout ->
    redraw()

for e in $('.grid_updating_elem')
  $(e).focusout ->
    draw_grid()

# ---------------------------------------
# calculate points 

calculate_standard_points = (f) ->
  for x in [get_range_x()[0]..get_range_x()[1]] by viewModel.step_size()
    [x, f(x)]

calculate_polar_points = (fn_object, f) ->
  for x in [fn_object.polar_range_min()..fn_object.polar_range_max()] by fn_object.polar_step_size()
    r = f(x)
    [r * Math.cos(x), 
     r * Math.sin(x)]

calculate_parametric_points = (fn_object, f_x, f_y) ->
  for t in [fn_object.para_range_min()..fn_object.para_range_max()] by fn_object.para_step_size()
    [f_x(t), f_y(t)]

calculate_points = (fn_object) ->
  switch fn_object.type()
    when 'Standard'
      f = new Function('x', "return " + fn_object.source)
      calculate_standard_points(f)
    when 'Polar'
      f = new Function('x', "return " + fn_object.source_polar)
      calculate_polar_points(fn_object, f)
    when 'Parametric'
      f_x = new Function('t', "return " + fn_object.source_para_x)
      f_y = new Function('t', "return " + fn_object.source_para_y)
      calculate_parametric_points(fn_object, f_x, f_y)

transform_points = (points) ->
  for [x, y] in points
    [get_paper_x(x), get_paper_y(y)]

# ---------------------------------------
# Create path from points

construct_path = (points, last_point) ->
  if points.length > 0
    x = points[0][0]
    y = points[0][1]
    if last_point && Math.abs(y - last_point[1]) > paper.height
      move_or_line = "M" 
    else 
      move_or_line = "L"
    move_or_line + x + "," + y + construct_path(points[1..-1], [x, y])
  else
    ""

draw_path = (fn_object) ->
  fn_error_id = '#function_error' + fn_object.id
  try
    points = calculate_points(fn_object)
    t_points = transform_points(points)
    path_string = 'M' + construct_path(t_points).substr(1)
    animation = Raphael.animation({path: path_string, stroke: fn_object.stroke}, 300, "<>")
    animate(fn_object.element, animation)
    $(fn_error_id).fadeOut(600)
  catch error
    $('#function_error' + fn_object.id).text(String(error))
    $(fn_error_id).fadeIn(400)

redraw = ->
  draw_grid()
  draw_axes()
  for fn_object in viewModel.functions()
    draw_path(fn_object)
  draw_border()
  start_animation()

r = paper.rect(0, 0, paper.width, paper.height)
r.attr("fill", "#fff")
draw_grid()
draw_axes()

# ---------------------------------------
# svg

options_string = "M26.834,14.693c1.816-2.088,2.181-4.938,1.193-7.334l-3.646,4.252l-3.594-0.699L19.596,7.45l3.637-4.242c-2.502-0.63-5.258,0.13-7.066,2.21c-1.907,2.193-2.219,5.229-1.039,7.693L5.624,24.04c-1.011,1.162-0.888,2.924,0.274,3.935c1.162,1.01,2.924,0.888,3.935-0.274l9.493-10.918C21.939,17.625,24.918,16.896,26.834,14.693z"

init_button = (path, id) ->
  path.attr({"fill": "#333", "stroke-opacity": "0"})
  $(id).hover (-> path.attr("fill": "#000")), (-> path.attr("fill", "#333"))

# ---------------------------------------
# init function

init_fn_object = (fn_object) ->
  # button 
  html_id = 'fn_options_button' + fn_object.id
  fn_options_button = Raphael(html_id, 30, 30)
  p = fn_options_button.path(options_string)
  init_button(p, '#' + html_id)
  p.scale(0.8)
  # slide options visible
  $('#' + html_id).click -> $('#' + 'fn_options_content' + fn_object.id).slideToggle(200)
  # color picker
  cw = Raphael.colorwheel($('#' + 'fn_stroke_color' + fn_object.id), 90, 80)
  #cw = Raphael.colorwheel(40, 20, 300, "#eee")
  cw.color(fn_object.stroke)
  cw.onchange (color) -> 
    s = Raphael.rgb(color.r, color.g, color.b)
    fn_object.stroke = s
    if fn_object.element
      fn_object.element.attr("stroke", s)
  # element
  element = paper.path("")
  element.attr {
    "stroke": fn_object.stroke
    "stroke-linecap": "butt"
    "stroke-linejoin": "miter"
    "stroke-width": "2"
    "stroke-dasharray": "none"
    }
  fn_object.element = element

# add example function after 'init_fn_object' exists

viewModel.add_function()
redraw()

# ---------------------------------------
# buttons


# redraw
redraw_button = Raphael("redraw_button", 40, 40)
r_p = redraw_button.path("M15.999,4.308c1.229,0.001,2.403,0.214,3.515,0.57L18.634,6.4h6.247l-1.562-2.706L21.758,0.99l-0.822,1.425c-1.54-0.563-3.2-0.878-4.936-0.878c-7.991,0-14.468,6.477-14.468,14.468c0,3.317,1.128,6.364,3.005,8.805l2.2-1.689c-1.518-1.973-2.431-4.435-2.436-7.115C4.312,9.545,9.539,4.318,15.999,4.308zM27.463,7.203l-2.2,1.69c1.518,1.972,2.431,4.433,2.435,7.114c-0.011,6.46-5.238,11.687-11.698,11.698c-1.145-0.002-2.24-0.188-3.284-0.499l0.828-1.432H7.297l1.561,2.704l1.562,2.707l0.871-1.511c1.477,0.514,3.058,0.801,4.709,0.802c7.992-0.002,14.468-6.479,14.47-14.47C30.468,12.689,29.339,9.643,27.463,7.203z")
init_button(r_p, '#redraw_button')
$('#redraw_button').click -> redraw()

# view options
view_options = Raphael("view_options", 40, 40)
v_o_p = view_options.path(options_string)
init_button(v_o_p, '#view_options')
$('#view_options').click -> $('#draw_options_content').slideToggle(200)

# save button

#save_button = Raphael("save_button", 40, 40)
#s_b = save_button.path("M16,1.466C7.973,1.466,1.466,7.973,1.466,16c0,8.027,6.507,14.534,14.534,14.534c8.027,0,14.534-6.507,14.534-14.534C30.534,7.973,24.027,1.466,16,1.466zM16,28.792c-1.549,0-2.806-1.256-2.806-2.806s1.256-2.806,2.806-2.806c1.55,0,2.806,1.256,2.806,2.806S17.55,28.792,16,28.792zM16,21.087l-7.858-6.562h3.469V5.747h8.779v8.778h3.468L16,21.087z")
#init_button(s_b, '#save_button')

# add function
add_function = Raphael("add_function", 40, 40)
a_p = add_function.path("M25.979,12.896 19.312,12.896 19.312,6.229 12.647,6.229 12.647,12.896 5.979,12.896 5.979,19.562 12.647,19.562 12.647,26.229 19.312,26.229 19.312,19.562 25.979,19.562z")
init_button(a_p, '#add_function')


