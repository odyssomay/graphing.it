
example_functions = ["Math.sin(x)", "Math.sin(x) * x"]

rand_nth = (coll) ->
  coll[Math.floor(Math.random() * coll.length)]

# ---------------------------------------
# knockout 

random = (max) ->
  Math.round(Math.random() * max)

viewModel = {
  functions: ko.observableArray([{source: rand_nth(example_functions), stroke: "#800"}])
  add_function: -> this.functions.push({source: "", stroke: "#" + random(9) + random(9) + random(9)})
  
  range_x_min_raw: "-10"
  range_x_max_raw: "10"
  
  range_y_min_raw: "-10"
  range_y_max_raw: "10"
  
  grid_distance_x: "1"
  grid_distance_y: "1"
  
  resolution: 0.01
}

ko.applyBindings(viewModel)

# ---------------------------------------
# knockout utils

get_range_x = ->
  [parseInt(viewModel.range_x_min_raw), parseInt(viewModel.range_x_max_raw)]
  
get_range_y = ->
  [parseInt(viewModel.range_y_min_raw), parseInt(viewModel.range_y_max_raw)]

paper = Raphael("draw_area", 300, 300)

# ---------------------------------------
# coordinate animations

animations = []

animate = (obj, animation) ->
  #obj.animate(animation)
  animations.push({obj: obj, ani: animation})
  
start_animation = () ->
  if animations.length > 0
    animating_object = animations[0].obj
    animating_animation = animations[0].ani
    animating_object.animate(animating_animation)
    for {obj, ani} in animations[1..-1]
      obj.animateWith(animating_object, animating_animation, ani)
    animations = []
    
# ---------------------------------------
# convert mathematical coordinates to paper coordinates

get_paper_x = (x) ->
  dx =  Math.abs(get_range_x()[0] - get_range_x()[1])
  (x - get_range_x()[0]) * paper.width / dx

get_paper_y = (y) ->
  dy = Math.abs(get_range_y()[0] - get_range_y()[1])
  paper.height - ((y - get_range_y()[0]) * paper.height / dy)

# ---------------------------------------
# drawing

axes_object = null
draw_axes = ->
  p_x = "M0," + get_paper_y(0) + "L" + get_paper_x(get_range_x()[1]) + "," + get_paper_y(0)
  p_y = "M" + get_paper_x(0) + ",0L" + get_paper_x(0) + "," + get_paper_y(get_range_y()[0])
  p = p_x + p_y
  if axes_object
    animate(axes_object, Raphael.animation({path: p}, 300, "<>"))
  else
    axes_object = paper.path(p)
    axes_object.attr("stroke-width", "2")
  #paper.rect(0, get_paper_y(0), get_paper_x(get_range_x()[1]), 0.5)
  #paper.rect(get_paper_x(0), 0, 0.5, get_paper_y(get_range_y()[0]))

grid_object = null
draw_grid = ->
  distance_x = parseFloat(viewModel.grid_distance_x)
  distance_y = parseFloat(viewModel.grid_distance_y)
  if get_range_x()[0] < 0
    x_path_neg = for x in [0..get_range_x()[0]] by -distance_x
      "M" + get_paper_x(x) + ",0" + "l0," + paper.height
  else
    x_path_neg = []
    
  if get_range_x()[1] > 0
    x_path_pos = for x in [0..get_range_x()[1]] by distance_x
      "M" + get_paper_x(x) + ",0" + "l0," + paper.height
  else
    x_path_pos = []
  
  if get_range_y()[0] < 0
    y_path_neg = for y in [0..get_range_y()[0]] by -distance_y
      "M0," + get_paper_y(y) + "l" + paper.width + ",0"
  else
    y_path_neg = []
  
  if get_range_y()[1] > 0
    y_path_pos = for y in [0..get_range_y()[1]] by distance_y
      "M0," + get_paper_y(y) + "l" + paper.width + ",0"
  else
    y_path_pos = []
  p = x_path_neg.join("") + x_path_pos.join("") + y_path_neg.join("") + y_path_pos.join("")
  if grid_object
    animate(grid_object, Raphael.animation({path: p}, 300, "<>"))
  else
    grid_object = paper.path(p)
    grid_object.attr({"stroke-width": "2", "stroke": "#EEE"})

draw_border = ->
  r = paper.rect(0, 0, paper.width, paper.height)
  r.attr("fill-opacity", "0")
  r.attr("stroke", "#555")
  r.attr("stroke-width", "10")

calculate_points = (f) ->
  for x in [get_range_x()[0]..get_range_x()[1]] by viewModel.resolution
    [get_paper_x(x), get_paper_y(f(x))]
    #[x * paper.width / Math.abs(range_x[0] - range_x[1]) + paper.width / 2,
    # paper.height - (draw_fn(x) * paper.height / Math.abs(range_y[0] - range_y[1]) + paper.height / 2)]

calculate_path = (points, last_point) ->
  if points.length > 0
    x = points[0][0]
    y = points[0][1]
    if last_point && Math.abs(y - last_point[1]) > paper.height #(Math.abs(range_y[0] - range_y[1])) * 1.5
      move_or_line = "M" 
    else 
      move_or_line = "L"
    move_or_line + x + " " + y + calculate_path(points[1..-1], [x, y])
  else
    ""

draw_graph = (fn_object) ->
  f = new Function('x', "return " + fn_object.source)
  path_string = "M" + paper.width / 2 + " " + paper.height / 2 + "M" + calculate_path(calculate_points(f)).substr(1)
  if fn_object.element
    animation = Raphael.animation({path: path_string, stroke: fn_object.stroke}, 300, "<>")
    animate(fn_object.element, animation)
  else
    element = paper.path(path_string)
    element.attr("stroke", fn_object.stroke)
    element.attr("stroke-linecap", "butt")
    element.attr("stroke-linejoin", "miter")
    element.attr("stroke-width", "2")
    fn_object.element = element

redraw = ->
  draw_grid()
  draw_axes()
  for fn_object in viewModel.functions()
    draw_graph(fn_object)
  draw_border()
  start_animation()

r = paper.rect(0, 0, paper.width, paper.height)
r.attr("fill", "#fff")

redraw()

# ---------------------------------------
# svg buttons

# add function
add_function = Raphael("add_function", 40, 40)
a_p = add_function.path("M25.979,12.896 19.312,12.896 19.312,6.229 12.647,6.229 12.647,12.896 5.979,12.896 5.979,19.562 12.647,19.562 12.647,26.229 19.312,26.229 19.312,19.562 25.979,19.562z")
a_p.attr({"fill": "#333", "stroke-opacity": "0"})
$('#add_function').hover (-> a_p.attr("fill": "#000")), (-> a_p.attr("fill", "#333"))

# redraw
redraw_button = Raphael("redraw_button", 40, 40)
r_p = redraw_button.path("M15.999,4.308c1.229,0.001,2.403,0.214,3.515,0.57L18.634,6.4h6.247l-1.562-2.706L21.758,0.99l-0.822,1.425c-1.54-0.563-3.2-0.878-4.936-0.878c-7.991,0-14.468,6.477-14.468,14.468c0,3.317,1.128,6.364,3.005,8.805l2.2-1.689c-1.518-1.973-2.431-4.435-2.436-7.115C4.312,9.545,9.539,4.318,15.999,4.308zM27.463,7.203l-2.2,1.69c1.518,1.972,2.431,4.433,2.435,7.114c-0.011,6.46-5.238,11.687-11.698,11.698c-1.145-0.002-2.24-0.188-3.284-0.499l0.828-1.432H7.297l1.561,2.704l1.562,2.707l0.871-1.511c1.477,0.514,3.058,0.801,4.709,0.802c7.992-0.002,14.468-6.479,14.47-14.47C30.468,12.689,29.339,9.643,27.463,7.203z")
r_p.attr({"fill": "#333", "stroke-opacity": "0"})

$('#redraw_button').hover (-> r_p.attr("fill": "#000")), (-> r_p.attr("fill", "#333"))

$('#redraw_button').click -> redraw()

